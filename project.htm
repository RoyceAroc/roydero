<!DOCTYPE html>
<html>
  Select the slide you are recording: <br>
    <div id="recordA"></div>
    <img style="zoom:50%;" id="slidesImgA">
    <script src="https://cdn.jsdelivr.net/gh/tanaikech/GetAccessTokenFromServiceAccount_js@master/getaccesstokengromserviceaccount_js.min.js"></script>
    <script async defer src="https://apis.google.com/js/api.js" onload="this.onload=function(){};handleClientLoad()" onreadystatechange="if (this.readyState === 'complete') this.onload()"></script>
    <div class="form-group">
        <div id="audioMediaNotAvailable" style="display: none;"> Microphone not found </div>
        <div id="recording">
            <button type="button" id="record" disabled>
                <i class="material-icons">Record </i>
            </button>
            <button type="button" id="stop">
                <i class="material-icons">Done Recording</i>
            </button>
        </div>
        <div id="processing">
            <div>
                <audio id="audio" controls>
            </div>
        </div>
    </div>
    <div> The progress bar below shows upload progress. Make sure to click the upload button only if you are satisfied with your recording. Happy recording :) (PS: Don't screw up other people's slides!) <p id="uploading"></p>
        <progress value="0" max="100" id="progress"></progress>
    </div>
    <button onclick="uploadRecording()">Upload/Replace Recording</button>
    <br>
    <br>
    <hr>
    <b> View any slides' recording </b>
     <div id="viewRecording"> </div>
      <button onclick="showRecording()"> View Recording</button>
      <br>
      <img style="zoom: 50%;" id="showRecordingImg"></img>
    <hr> <b>Slides that still need to be recorded (refresh the page to see the updated list once you are finished recording):</b> <div id="stats"></div>
 
    <hr>
    <b> President and Vice President only</b>
     <br>Use the button below to update the slides <br> Adding extra slides once this project is sent out to be recorded can create problems <br>
     <div id="addStatus">...<br></div>
    <button onclick="updateSlides()"> Update Presentation Slides</button>
    <script>
      
      var projCode;
      

      let slideImages = []; let slideRecordings = [];
        const object = {
            private_key: "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC5ZfkzoKk9cTKm\nZhqIvdJlf20mo/cWDmiazGggUIB78VOUs0qEHbaqgbj+fgOM0SlNtCbl0uUmmapI\nM0FQz+87d5+4CJKsCu0jg129tKyMQjebmOfA09ruoGKa5o7cGsPyHpJFLkNEniBY\nEi3sGjczXvhEluUR43hms/9NYKS9ursk0sIEooEpLptoFgqbInMnkfdkFIqJug7u\nFOPvfyLxE8k7acZb/cxUoXNaKxbGb121r1Eqjz+hVHGQkznhfI6Dkd1pyJswuW8E\np/X1JJpwiclh0s54kNEBSrEG52fRkCX28EZrT+9vvZ3taI8GwNXR2nUb6G1U/m6s\n2YC30rMZAgMBAAECggEAAdppgVuwWAyhsrpFDCEHnBudYfGUIUc6F51bnMJpPQlB\nFQoDa0AnyLBcwsXML8lnG197CbjlW6Yqu/zagN4J4w3eTcGKLnLlLWxypgLgZv4s\nyPRK5r7HYAjANjz/6GZ9FxZj+byNZWobjSh7XIeOOIgmZ6XG0Dpg7vfgIVbKDBpw\nHvubUx57w//OxwFZ15/AtlxB0yRjUEKUFLDlla8jDEPZAo/fVr12TOYkatcPjVmw\n95ViOqCVLd2yskJJ6/YKnI6ZaZ6nGqj7zuOVrwX7owCSXUl1Ov42PjNjAnBx1Axb\ncr0gFL7GzXTQ2JdyBw/KoXZ3ZoaR3EQuVS6/9A+t7QKBgQDafXFeibbNby4voZPQ\n2D5W+LezDPi67qNofGKKk8bPLTErevp0Kp5OYfE2Gnvy00RDik48BfhK0ESAGZXo\nrutX8jnrQqJRdGnIRT4P0pUs+KDwXAVlPoAV9/qbU8OHSxPxMsC2JDhcpFG718Rm\nt2REtLa8y/U1AyeOrrMa43KZnQKBgQDZOinPDfcc0sFto75N1OU3VM3BI6tQNy+o\nY/ZvJVBJUTqqGMyg3EqJTXjJSesail/Eckz/Ynki8yyTqNIxzdsC8eqiYPYAy8+M\nvqyIZp9z22oWqO3Op+60bVZBV0HdAtBsOJR1M3IFyo+etZ73Klb88AfMovB/FYs3\n6J/Qr9E0rQKBgBpS8s3JGdU2iAIFHaIT667e2IMiFPWwus9j7Rt1IobjkwECGBrW\n56vZ8Q3rsvNWsOrSRwrETV32KcqlSoJ2ULSP4pqNtLDLrdMLRKbzYDXC3uEWtS+1\nkAkVj4QXW395dDWjP8SyKHhA8/gFzwvxHIuKmlm02R5B+wod0kZzEOOhAoGAGsB9\n+6DlqOgPqDf9LMqmO+02ta114JgbR2qgI8n9nDnjtqT9NmZKy6P91xRCXu9hoejN\nsLno3zQBbmHhGP8YFMHEOqEkSq7O7a9hwh6ZToRcCVRejQ/DZvb8I2nik5xQHLPP\nHKvsQ+hRTaNiY2AUfGv3Ge2LHquBjK4aWHH+mrUCgYEArsxgc9Y0hJ6ghO02ekiU\nPLYQAR6TVAwX7PAfUZXOzBzwgd8l8HaCscByKcjtI4rz/V/FJlGo2ZhFTMVFYOob\ne6+9xXMEzEDyR7DCEySHJOWUA73WewG3traHERakIa8l8gThVguKmI6yuxqVpZR/\ngAB5VEyoHzh8N55RTLADVtk=\n-----END PRIVATE KEY-----\n",
            client_email: "roydero@roydero-32a7b.iam.gserviceaccount.com",
            scopes: ["https://www.googleapis.com/auth/presentations.readonly"],
        };
        const handleClientLoad = () => gapi.load("client", async () => gapi.auth.setToken(await GetAccessTokenFromServiceAccount.do(object)));

       function showRecording() {
          let m = document.getElementById("view").value;
          document.getElementById("showRecordingImg").src = slideImages[m];
          var a = new Audio(slideRecordings[m]);
          a.play();
       }


        async function updateSlides() {
            const storageRef = firebase.storage().ref(`${projCode}/slides`);
            storageRef.listAll().then((listResults) => {
                const promises = listResults.items.map((item) => {
                    return item.delete();
                });
                Promise.all(promises);
            });
            gapi.client.init({
                discoveryDocs: ["https://slides.googleapis.com/$discovery/rest?version=v1", ],
            }).then(async () => {
                var slides = await gapi.client.slides.presentations.get({
                    presentationId: '1rJrEBN8iW-GniGjXq4xFs7PwaFPqUActCsLzPsKQh2w'
                });
                for (let i = 0; i < slides.result.slides.length; i++) {
                    var as = await gapi.client.slides.presentations.pages.getThumbnail({
                        presentationId: '1rJrEBN8iW-GniGjXq4xFs7PwaFPqUActCsLzPsKQh2w',
                        pageObjectId: slides.result.slides[i].objectId
                    });
                    let blob = await fetch(as.result.contentUrl).then(r => r.blob());
                    var finishedFile = new File([blob], `${i}.JPG`, {
                        type: "image/jpg"
                    });
                    var storage = firebase.storage().ref(`${projCode}/slides/${i}.JPG`);
                    //upload file
                    var upload = storage.put(finishedFile);
                    document.getElementById("addStatus").innerHTML += `Added Slide ${i+1} <br>`;
                }
                
            });
        }
        var recordButton, stopButton, pauseButton, resumeButton, recorder, audioFile, finishedFile;

        function uploadRecording() {
            var storage = firebase.storage().ref(`${projCode}/recordings/${document.getElementById("as").value}.mp3`);
            //upload file
            var upload = storage.put(finishedFile);
            upload.on("state_changed", function progress(snapshot) {
                var percentage = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                document.getElementById("progress").value = percentage;
            }, function error() {
                alert("error uploading file");
            }, function complete() {
                document.getElementById("uploading").innerHTML = "Done Uploading!";
            });
        }
        //create variables for button or audio file
        window.onload = async function() {
            projCode = new URLSearchParams(window.location.search).get('projectCode');
            const storageRef = firebase.storage().ref(`${projCode}/slides`);
            await storageRef.listAll().then(async function(result) {
                result.items.forEach(async function(imageRef) {
                    let m = parseInt(imageRef._delegate._location.path_.substring(31, imageRef._delegate._location.path_.length - 4));
                    imageRef.getDownloadURL().then(async function(url) {
                        slideImages[m] = url;
                        if (m == 0) {
                            document.getElementById("slidesImgA").src = url;
                        }
                    });
                });
                myParent = document.getElementById("recordA");
                var selectListA = document.createElement("select");
                selectListA.addEventListener("change", function() {
                    if (slideImages[selectList.value] != undefined) {
                        document.getElementById("slidesImgA").src = slideImages[selectListA.value];
                    }
                });
                selectListA.id = "as";
                myParent.appendChild(selectListA);
                //Create and append the options
                for (var i = 0; i < result.items.length; i++) {
                    var option = document.createElement("option");
                    option.value = i;
                    let x = i + 1;
                    option.text = "Slide " + x;
                    selectListA.appendChild(option);
                }


                var selectList = document.createElement("select");
               var kk = document.getElementById("viewRecording");
                selectList.id = "view";
                kk.appendChild(selectList);
                //Create and append the options
                for (var i = 0; i < result.items.length; i++) {
                    var option = document.createElement("option");
                    option.value = i;
                    let x = i + 1;
                    option.text = "Slide " + x;
                    selectList.appendChild(option);
                }


                const storageRef = firebase.storage().ref(`${projCode}/recordings`);
              
                storageRef.listAll().then(async function(result) {
                  for(let x=0; x<result.items.length; x++) {
                    let m = parseInt(result.items[x]._delegate._location.path_.substring(35, result.items[x]._delegate._location.path_.length - 4));
                    await result.items[x].getDownloadURL().then( function(url) {
                       slideRecordings[m] = url;
                      })
                  }
              
                for(let k=0; k<slideImages.length; ++k) {
                  if(slideRecordings[k] == undefined) {
                    document.getElementById("stats").innerHTML += `Slide ${k+1} <br>`;
                  }
                }
                });
            }).catch(function(error) {});

            recordButton = document.getElementById('record');
            stopButton = document.getElementById('stop');
            navigator.mediaDevices.getUserMedia({
                audio: true
            }).then(function(stream) {
                recordButton.disabled = false;
                stopButton.disabled = true;
                recordButton.addEventListener('click', startRecording);
                stopButton.addEventListener('click', stopRecording);
                var options = {
                    mimeType: 'audio/webm'
                }
                recorder = new MediaRecorder(stream, options);
                recorder.addEventListener('dataavailable', onRecordingReady);
            }, function() {
                recordButton.disabled = true;
                stopButton.disabled = true;
                $("#audioMediaNotAvailable").show();
            }); 
        };

        function startRecording() {
            recordButton.disabled = true;
            stopButton.disabled = false;
            recorder.start();
        }

        function stopRecording() {
            recordButton.disabled = false;
            stopButton.disabled = true;
            recorder.stop();
        }

        function onRecordingReady(e) {
            var audio = document.getElementById('audio');
            audioFile = e.data;
            audio.src = URL.createObjectURL(e.data);
            audio.play();
            finishedFile = new File([e.data], "test.mp3", {
                type: "audio/mp3"
            });
        }
    </script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-auth.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-storage.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-firestore.js"></script>
    <script src="assets/js/firebase.js"></script>
</html>